import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.ZoneId

buildscript {
    ext {
        springBootVersion = '2.7.14'
        springCloudVersion = "2021.0.8"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'io.spring.gradle:dependency-management-plugin:1.1.2'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.1.2'
    id 'checkstyle'
}

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}

allprojects {
    Properties gradleProperties = new Properties()
    File parent = getRootDir();
    gradleProperties.load(new FileInputStream(parent.absolutePath + "/version.properties"))

    group = "com.bizlers.geoq"
    version = gradleProperties['rootVersion']

    ext {
        buildNumber = !project.hasProperty("BUILD_NUMBER") ? 1 : project["BUILD_NUMBER"]
        buildTime = !project.hasProperty("build.time") ? new Date().format('yyyyMMddHHmmss') : project["build.time"]
        buildEnv = !project.hasProperty("build.env") ? "DEVELOP" : project["build.env"]
    }
}

description = """Geo Discovery Server"""
mainClassName = "com.bizlers.geoq.discovery.GeoDiscoveryServer"

ext.pluginsDir = sourceSets.main.resources.srcDirs[0].path.concat("/plugins")
println "Plugins directory: " + pluginsDir

jar {
    enabled = true
    version =  project.version

    exclude '**/*.properties'
    exclude 'plugins/'

    manifest {
        attributes 'Specification-Title': project.description
        attributes 'Specification-Version': project.version
        attributes 'Implementation-Version': buildNumber
        attributes 'Build-Time': buildTime
        attributes 'Build-Environment': buildEnv
    }
}

bootJar {
    enabled = false
}

startScripts {
    classpath += files("plugins") + files("conf")
}

springBoot {
    buildInfo {
        properties {
            time = LocalDateTime.parse(buildTime, DateTimeFormatter.ofPattern("yyyyMMddHHmmss", Locale.US))
                    .atZone(ZoneId.of("Asia/Kolkata")).toInstant()
            additional = [
                    'build.number': buildNumber
            ]
        }
    }
}

checkstyle {
    toolVersion "8.19"
}

checkstyleMain {
    configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
}

task assemblePlugins {
    copy {
        from project(":geo-discovery-preload-dataset-plugin").buildDir.path.concat("/libs")
        into pluginsDir
    }
}

build {
    dependsOn assemblePlugins
}

distributions {
    main {
        contents {
            into("lib/conf") {
                exclude 'plugins/'
                from "$buildDir/resources/main"
            }

            into("lib/plugins") {
                from "$buildDir/resources/main/plugins"
            }
        }
    }

    doLast {
        copy {
            println "Copying installation script"
            from "entrypoint.sh"
            into "$buildDir/distributions"
        }
    }
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'

    implementation("com.jcabi:jcabi-log:0.17.2")
    implementation("org.projectlombok:lombok:1.18.6")
    annotationProcessor("org.projectlombok:lombok:1.18.6")

    // to make it work with java11
    implementation("javax.xml.bind:jaxb-api:2.2.11")
    implementation("com.sun.xml.bind:jaxb-core:2.2.11")
    implementation("com.sun.xml.bind:jaxb-impl:2.2.11")
    implementation("javax.activation:activation:1.1.1")

    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-jersey")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
    implementation("org.springframework.cloud:spring-cloud-starter-config")

    implementation("org.pf4j:pf4j-spring:0.5.0") {
        exclude module: "slf4j-log4j12"
    }

    implementation("com.hazelcast:hazelcast:3.9.2")
    implementation("com.hazelcast:hazelcast-client:3.9.2")

    implementation("org.apache.tomcat.embed:tomcat-embed-jasper:8.0.47")
    implementation("javax.servlet:jstl:1.2")

    implementation 'io.swagger:swagger-jersey2-jaxrs:1.5.22'

    implementation("org.mongodb.morphia:morphia:1.3.2")

    implementation project(":geo-utils")
    implementation project(":geo-discovery-api")
    implementation project(":geo-models")

    testImplementation("junit:junit:4.12")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
